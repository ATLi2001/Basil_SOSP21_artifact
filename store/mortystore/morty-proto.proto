syntax = "proto2";

import "replication/common/request.proto";
import "store/common/common-proto.proto";

package mortystore.proto;

enum OperationType {
  READ = 1;
  WRITE = 2;
}

message Operation {
  required OperationType type = 1;
  required string key = 2;
  required string val = 3;
}

message Transaction {
  required uint64 id = 1;
  repeated Operation ops = 2;
}

message Branch {
  required uint64 id = 1;
  required Transaction txn = 2;
  repeated Branch seq = 3;
  repeated uint64 shards = 4;
  repeated uint64 prepared_shards = 5;
  repeated uint64 koed_shards = 6;
  repeated PrepareKO koes = 7;
}

message PrepareKO {
  required Branch branch = 1;
  repeated Transaction prepared = 2;
  repeated Transaction committed = 3;
}

message Read {
  required Branch branch = 1;
  required string key = 2;
}

message Write {
  required Branch branch = 1;
  required string key = 2;
  required string value = 3;
}

message ReadReply {
  required Branch branch = 1;
  required string key = 2;
  required string value = 3;
}

message WriteReply {
  required Branch branch = 1;
  required string key = 2;
  required string value = 3;
}

message Prepare {
  required Branch branch = 1;
}

message PrepareOK {
  required Branch branch = 1;
}

message KO {
  required Branch branch = 1;
}

message Commit {
  required Branch branch = 1;
}

message CommitReply {
  required Branch branch = 1;
}

message Abort {
  required Branch branch = 1;
}

// old 
message GetMessage {
  required string key = 1;
}

message PutMessage {
  required string key = 1;
  required string value = 2;
}

message PrepareMessage {
  required TransactionMessage txn = 1;
}

message CommitMessage {
}

message AbortMessage {
  required TransactionMessage txn = 1;
}

message Request {
  enum Operation {
    GET = 1;
    PUT = 2;
    PREPARE = 3;
    COMMIT = 4;
    ABORT = 5;
  }	
  required Operation op = 1;
  required uint64 txnid = 2;
  optional GetMessage get = 3;
  optional PutMessage put = 4;
  optional PrepareMessage prepare = 5;
  optional CommitMessage commit = 6;
  optional AbortMessage abort = 7;
}

message Reply {
  // 0 = OK
  // -1 = failed
  // -2 = retry
  // -3 = abstain/no reply
  required int32 status = 1;
  optional string value = 2;
}

message UnloggedRequestMessage {
    required replication.UnloggedRequest req = 1;
}

message UnloggedReplyMessage {
  required bytes reply = 1;
  required uint64 clientreqid = 2;
}
