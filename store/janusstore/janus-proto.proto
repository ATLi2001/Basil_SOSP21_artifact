syntax = "proto2";

import "store/common/common-proto.proto";

package janusstore.proto;

message DependencyList {
    repeated uint64 txnid = 1;
}

message GetMessage {
    required string key = 1;
}

message PutMessage {
    required string key = 1;
    required string value = 2;
}

message TransactionMessage {
    enum Status {
      PREACCEPT = 0;
      ACCEPT = 1;
      COMMIT = 2;
    }
    // TODO(eric): encode into int along with transaction.h if time
    required string serverid = 1;
    required uint64 txnid = 2;
    required Status status = 3;
    repeated GetMessage gets = 4;
    repeated PutMessage puts = 5;
}

message PreAcceptMessage {
    required TransactionMessage txn = 1;
    required uint64 ballot = 2;
}

message PreAcceptOKMessage {
    required uint64 txnid = 1;
    required uint64 serverid = 2;
    required DependencyList dep = 3;
}

message PreAcceptNotOKMessage {}

message AcceptMessage {
    required uint64 txnid = 1;
    required DependencyList dep = 2;
    required uint64 ballot = 3;
}

message AcceptOKMessage {}

message AcceptNotOKMessage {
    // the highest ballot number seen for the requested transaction
    required uint64 txnid = 1;
    required uint64 highest_ballot = 2;
}

message CommitMessage {
    required uint64 txnid = 1;
    required DependencyList dep = 2;
}

message CommitOKMessage {
    required uint64 txnid = 1;
    required bool abandon = 2;
    required bool result = 3; // TODO may need to change this type for reads
}

message InquireMessage {
    required uint64 txnid = 1;
}

message InquireOKMessage {
    // InquireOK sent when the inquired txn status == committing
    required uint64 txnid = 1;
}

// for failure recovery; implement if time and for now don't care
// message PrepareMessage {}
// message PrepareOKMessage {}

message Request {
     enum Operation {
          GET = 1; // TODO what is this?
          PREACCEPT = 2;
          ACCEPT = 3;
          COMMIT = 4;
          INQUIRE = 5;

          // for failure recovery
          PREPARE = 6;
     }
     required Operation op = 1;
     optional PreAcceptMessage preaccept = 2;
     optional AcceptMessage accept = 3;
     optional CommitMessage commit = 4;
     optional InquireMessage inquire = 5;

     // for failure recovery
     // optional PrepareMessage prepare = 6;
}

message Reply {
     enum Operation {
          GET = 1; // use value
          PREACCEPT_OK = 2;
          PREACCEPT_NOT_OK = 3; // contains no message
          ACCEPT_OK = 4; // contains no message
          ACCEPT_NOT_OK = 5;
          COMMIT_OK = 6;
          INQUIRE_OK = 7;

          // for failure recovery
          PREPARE_OK = 8;
     }
     required Operation op = 1;
     optional string value = 2; // TODO what is this for?
     optional PreAcceptOKMessage preaccept_ok = 3;
     optional PreAcceptNotOKMessage preaccept_not_ok = 4;
     optional AcceptOKMessage accept_ok = 5;
     optional AcceptNotOKMessage accept_not_ok = 6;
     optional CommitOKMessage commit_ok = 7;
     optional InquireOKMessage inquire_ok = 8;

     // for failure recovery
     // optional PrepareOKMessage prepare_ok = 7;
}
