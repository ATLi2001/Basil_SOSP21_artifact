syntax = "proto2";

import "store/common/common-proto.proto";

package indicusstore.proto;

enum CommitDecision {
  COMMIT = 0;
  ABORT = 1;
}

message SignedMessage {
  required bytes data = 1;
  required uint64 process_id = 2;
  required bytes signature = 3;
}

message Signature {
  required uint64 process_id = 1;
  required bytes signature = 2;
}

message Signatures {
  repeated Signature sigs = 1;
}

message Read {
  required uint64 req_id = 1;
  required bytes key = 2;
  required TimestampMessage timestamp = 3;
}

message GroupedSignatures {
  map<uint64, Signatures> grouped_sigs = 1;
}

message CommittedProof {
  required Transaction txn = 1;
  oneof reply_oneof {
    GroupedSignatures p1_sigs = 2;
    GroupedSignatures p2_sigs = 3;
  }
}

message CommittedWrite {
  required bytes value = 1;
  required TimestampMessage timestamp = 2;
  optional CommittedProof proof = 3;
}

message Dependency {
  required PreparedWrite prepared = 1;
  optional Signatures prepared_sigs = 2;
  required int64 involved_group = 3;
}

message PreparedWrite {
  required bytes value = 1;
  required TimestampMessage timestamp = 2;
  required bytes txn_digest = 3;
}

message PreparedWrites {
  repeated PreparedWrite writes = 1;
}

message ReadReply {
  required uint64 req_id = 1;
  required bytes key = 2;
  optional CommittedWrite committed = 3;
  oneof prepared_oneof {
    PreparedWrite prepared = 4;
    SignedMessage signed_prepared = 5;
  }
}

// Phase 1
message Transaction {
  required uint64 client_id = 1;
  required uint64 client_seq_num = 2;
  repeated int64 involved_groups = 3;
  repeated ReadMessage read_set = 4;
  repeated WriteMessage write_set = 5;
  repeated Dependency deps = 6;
  required TimestampMessage timestamp = 7;
}

message Phase1 {
  required uint64 req_id = 1;
  required Transaction txn = 2;
}

message ConcurrencyControl {
  enum Result {
    COMMIT = 0;
    ABORT = 1;
    ABSTAIN = 2;
    WAIT = 3;
    RETRY = 4;
  }
  required Result ccr = 2;
  optional CommittedProof committed_conflict = 3;
  optional bytes txn_digest = 4;
}

message Phase1Reply {
  required uint64 req_id = 1;
  oneof concurrency_oneof {
    ConcurrencyControl cc = 2;
    SignedMessage signed_cc = 3;
  }
}

message Phase1Replies {
  repeated Phase1Reply replies = 1;
}


message Phase2 {
  required uint64 req_id = 1;
  required CommitDecision decision = 2;
  optional Transaction txn = 3;
  optional bytes txn_digest = 4;
  optional GroupedSignatures grouped_sigs = 5;
}

message Phase2Decision {
  required CommitDecision decision = 2;
  optional bytes txn_digest = 3;
}

message Phase2Reply {
  required uint64 req_id = 1;
  oneof p2_decision_oneof {
    Phase2Decision p2_decision = 2;
    SignedMessage signed_p2_decision = 3;
  }
}

message Writeback {
  required CommitDecision decision = 1;
  optional bytes txn_digest = 2;
  optional Transaction txn = 3;
  oneof reply_oneof {
    GroupedSignatures p1_sigs = 4; // fast path commit
    GroupedSignatures p2_sigs = 5; // slow path commit or abort
    CommittedProof conflict = 6;   // fast path abort
  }
}

message AbortInternal {
  required TimestampMessage ts = 1;
  repeated bytes read_set = 2;
}

message Abort {
  oneof internal_oneof {
    AbortInternal internal = 1;
    SignedMessage signed_internal = 2;
  }
}
