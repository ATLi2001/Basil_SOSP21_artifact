syntax = "proto2";

import "store/common/common-proto.proto";

package indicusstore.proto;

enum CommitDecision {
  COMMIT = 0;
  ABORT = 1;
}

message SignedMessage {
  required string msg = 1;
  required string type = 2;
  required uint64 process_id = 3;
  required bytes signature = 4;
}

message SignedMessages {
  repeated SignedMessage msgs = 1;
}

message Read {
  required uint64 req_id = 1;
  required uint64 txn_id = 2;
  required string key = 3;
  // timestamps are (time, client_id, txn_id)
  required TimestampMessage timestamp = 4;
}

message WriteProof {
  required Transaction txn = 1;
  oneof p2_replies_oneof {
    Phase2Replies p2_replies = 2;
    SignedMessages signed_p2_replies = 3;
  }
}

message PreparedWrite {
  required string value = 1;
  required TimestampMessage timestamp = 2;
  required Transaction txn = 3;
}

message ReadReply {
  required uint64 req_id = 1;
  required int32 status = 2;
  required string key = 3;
  optional string committed_value = 4;
  optional TimestampMessage committed_timestamp = 5;
  optional WriteProof committed_proof = 6;
  // most recently prepared
  oneof prepared_oneof {
    PreparedWrite prepared = 7;
    SignedMessage signed_prepared = 8;
  }
}

// Phase 1
message Transaction {
  required uint64 id = 1;
  repeated ReadMessage readset = 2;
  repeated WriteMessage writeset = 3;
  optional TimestampMessage timestamp = 4;
  // set of txn ids
  repeated Transaction deps = 5;
}

message Phase1 {
  required uint64 req_id = 1;
  required uint64 txn_id = 2;
  required Transaction txn = 3;
}

message Phase1Reply {
  enum ConcurrencyControlResult {
    COMMIT = 0;
    ABORT = 1;
    ABSTAIN = 2;
    WAIT = 3;
    RETRY = 4;
  }
  required uint64 req_id = 1;
  required int32 status = 2;
  required ConcurrencyControlResult ccr = 3;
  optional Transaction txn_conflict = 4;
  optional TimestampMessage retry_timestamp = 5;
}

message Phase1Replies {
  repeated Phase1Reply replies = 1;
}

message Phase2 {
  required uint64 txn_id = 1;
  oneof p1_replies_oneof {
    Phase1Replies p1_replies = 2;
    SignedMessages signed_p1_replies = 3;
  }
  optional CommitDecision decision = 4;
}

message Phase2Reply {
  required CommitDecision decision = 1;
  required bytes txn_digest = 2;
}

message Phase2Replies {
  repeated Phase2Reply replies = 1;
}

message Writeback {
  required uint64 req_id = 1;
  required uint64 txn_id = 2;
  required Transaction txn = 3;
  oneof p1_replies_oneof {
    Phase2Replies p2_replies = 4;
    SignedMessages signed_p2_replies = 5;
  }
}

message Abort {
  required uint64 req_id = 1;
}
